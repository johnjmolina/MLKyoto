{
  
    
        "post0": {
            "title": "Bayesian Parameter Estimation",
            "content": "$$ begin{align} P(X lvert I) + P( overline{X} lvert I) &amp;= 1 &amp; textrm{(Sum Rule)} label{e:sum_rule} P(X,Y lvert I) &amp;= P(X lvert Y, I) times P(Y lvert I) &amp; textrm{(Product Rule)} notag &amp;=P(Y lvert X, I) times P(X lvert I) label{e:product_rule} end{align}$$$$ begin{align*} overbrace{P(X lvert Y, I)}^{ small{ mathrm{posterior}}} &amp;= frac{ overbrace{P(Y lvert X,I)}^{ small{ mathrm{likelihood}}} times overbrace{P(X lvert I)}^{ small{ mathrm{prior}}}}{ underbrace{P(Y lvert I)}_{ small{ mathrm{evidence}}}}&amp; textrm{(Bayes&#39; Theorem)} label{e:bayes} P(X lvert I) &amp;= int textrm{d}Y P(X, Y lvert I) = int textrm{d}Y P(X lvert Y, I) times P(Y lvert I) &amp; textrm{(Marginalization)} label{e:marginalization} end{align*}$$ $$ begin{align*} P( textrm{Hypothesis} lvert textrm{Data}, I) &amp;= frac{P( textrm{Data} lvert textrm{Hypothesis}, I) times P( textrm{Hypothesis} lvert I)}{P( textrm{Data}, I)} label{e:bayes_hypothesis} end{align*}$$$$ begin{align*} P( Theta lvert D, I) &amp;= frac{P(D lvert Theta, I) times P( Theta lvert I)}{P(D lvert I)} label{e:bayes_theta} &amp; propto P(D lvert Theta, I) times P( Theta lvert I) end{align*}$$ Assume that $D = {D_k }_{k=1}^N$ . $$ begin{align*} P( Theta lvert D,I) &amp; propto P( {D_k }_{k=1}^N lvert Theta, I) times P( Theta lvert I) &amp;= P( {D_k }_{k=2}^N lvert D_1, Theta, I) times P(D_1 lvert Theta, I) times P( Theta lvert I) &amp;= P( {D_k }_{k=2}^N lvert Theta, I) times P(D_1 lvert Theta, I) times P( Theta lvert I) &amp;= P( {D_k }_{k=3}^N lvert Theta, I) times P(D_2 lvert Theta, I) times P(D_1 lvert Theta, I) times P( Theta lvert I) &amp; vdots &amp;= left( Pi_{k=1}^N P(D_k lvert Theta, I) right) times P( Theta lvert I) end{align*}$$ $$ begin{align*} P( Theta lvert D,I)&amp;= big( Pi_{k=m+1}^{N} P(D_k lvert Theta, I) big) big( Pi_{j=1}^{m} P(D_j lvert Theta, I) big) P( Theta lvert I) &amp;= big( Pi_{k=m+1}^{N} P(D_k lvert Theta, I) big) times P( Theta lvert {D_j }_{j=1}^m, I) end{align*}$$ Laplace&#39;s Approximation, Best Estimates and Error Bars . $$ begin{align*} L &amp;= ln{P( Theta lvert D, I)} = ln P &amp;= L lvert_{ Theta_0} + nabla L lvert_{ Theta_0} cdot( Theta - Theta_0) + frac{1}{2} ( Theta- Theta_0)^{t} cdot nabla nabla L lvert_{ Theta_0} cdot( Theta- Theta_0) + mathcal{O} big(( Theta- Theta_0)^3 big) &amp; simeq L lvert_{ Theta_0} + frac{1}{2} ( Theta- Theta_0)^{t} cdot nabla nabla L lvert_{ Theta_0} cdot( Theta- Theta_0) end{align*}$$ $$ begin{align*} P( Theta lvert D,I) propto exp{ left[- frac{1}{2} left( Theta- Theta_0 right)^t cdot left(- nabla nabla L lvert_{ Theta_0} right) cdot left( Theta- Theta_0 right) right]} end{align*}$$$$ begin{align*} P_{ textrm{Gaussian}}(A lvert mu, Sigma) &amp;= frac{1}{ sqrt{(2 pi)^d det{ Sigma}}} exp{ left[- frac{1}{2} left(A- mu right)^t cdot Sigma^{-1} cdot left(A- mu right) right]} left langle A right rangle &amp;= mu left langle(A^i - mu^i)(A^j - mu^j) right rangle &amp;= Sigma^{ij} end{align*}$$$$ begin{align*} A = mu pm sqrt{ textrm{diag}({ Sigma})} end{align*}$$$$ begin{align*} mu&amp; rightarrow Theta_0 Sigma&amp; rightarrow (- nabla nabla L lvert_{ Theta_0})^{-1} end{align*}$$ $$ begin{align*} P( Theta lvert D, I) &amp; propto P(D lvert Theta, I) times P( Theta lvert I) &amp; propto Pi_k P(y_k lvert Theta, I) &amp;= Pi_k frac{1}{ sqrt{2 pi} sigma_k} exp{ left[- frac{ big(y_k - f(X_k; Theta) big)^2}{2 sigma_k^2} right]} end{align*}$$$$ begin{align*} L &amp;= textrm{constant} - sum_k frac{ left(y_k - f(X_k; Theta) right)^2}{2 sigma_k^2} &amp;= textrm{constant} - frac{1}{2} chi^2 end{align*}$$$$ begin{align*} nabla L = - frac{1}{2} nabla chi^2 = 0 Longrightarrow nabla chi^2 = 0 end{align*}$$ $$ begin{align} nabla nabla L = - frac{1}{2} nabla nabla chi^2 end{align}$$ $$ begin{align} Sigma = 2 left( nabla nabla chi^2 lvert_{ Theta_0} right)^{-1} end{align}$$ $$ begin{align} P( Theta lvert D, I) &amp;= int textrm{d} sigma , P( Theta, sigma lvert D, I) &amp; propto int textrm{d} sigma , P(D lvert Theta, sigma, I) times P( Theta, sigma lvert I) end{align}$$ $$ begin{align} P( Theta lvert D, I) &amp; propto int_0^ infty textrm{d} sigma left( Pi_k frac{1}{ sqrt{2 pi} sigma} exp{ left[- frac{ left(y_k - f(X_k; Theta) right)^2}{2 sigma^2} right]} right) times frac{1}{ sigma} &amp;= (2 pi)^{-N/2} int_0^ infty frac{ textrm{d} sigma}{ sigma} sigma^{-N} exp{ left[- frac{1}{2 sigma^2} sum_k left(y_k - f(X_k; Theta) right)^2 right]} end{align}$$ $$ begin{align} t &amp;= frac{ sum_k left(y_k - f(X_k; Theta) right)^2}{2 sigma^2} = frac{S}{2 sigma^2} frac{ textrm{d} sigma}{ sigma} &amp;= - frac{ textrm{d}t}{2t} end{align}$$ $$ begin{align} P( Theta lvert D, I) &amp; propto (2 pi)^{-N/2} int_0^ infty frac{ textrm{d}t}{t} left( frac{2t}{S} right)^{N/2} e^{-t} &amp;= pi^{-N/2} underbrace{ left( int_0^ infty frac{ textrm{d}t}{t} t^{N/2} e^{-t} right)}_{= Gamma(N/2)}S^{-N/2} end{align}$$ $$ begin{align} L &amp;= textrm{constant} - frac{N}{2} ln{S} end{align}$$ $$ begin{align} nabla L &amp;= - frac{N}{2} frac{ nabla S}{S}= 0 Longrightarrow nabla S = 0 end{align}$$ $$ begin{align} nabla nabla L &amp;= - frac{N}{2} left[ frac{ nabla nabla S}{S} - frac{ left( nabla S right) left( nabla S right)}{S^2} right] end{align}$$$$ begin{align} nabla nabla L lvert_{ Theta_0} &amp;= - frac{N}{2} frac{ nabla nabla S lvert_{ Theta_0}}{S_0} = - frac{1}{2} left. nabla nabla left( frac{S}{S_0/N} right) right lvert_{ Theta_0} end{align}$$ $$ begin{align} Sigma &amp;= 2 left( left. nabla nabla left( frac{S}{S_0/N} right) right lvert_{ Theta_0} right)^{-1} end{align}$$ $$ begin{align} chi^2 = sum_k frac{ left(y_k - f(X_k; Theta) right)^2}{ sigma_k^2} &amp; longrightarrow frac{S}{S_0/N} = frac{N}{S_0} sum_k left(y_k - f(X_k; Theta) right)^2 sigma_k^2 &amp; longrightarrow frac{S_0}{N} = frac{1}{N} sum_{k} left(y_k - f(X_k; Theta_0) right)^2 end{align}$$ $$ begin{align} P( sigma lvert D, I) &amp;= int textrm{d} Theta P( sigma, Theta lvert D, I) &amp; propto int textrm{d} Theta P(D lvert sigma, Theta, I) P( sigma, Theta lvert I) end{align}$$ $$ begin{align} P( sigma lvert D, I) propto sigma^{-(N+1)} int textrm{d} Theta exp{ left[- frac{S( Theta)}{2 sigma^2} right]} end{align}$$ $$ begin{align} S simeq S_0 + nabla S lvert_{ Theta_0} cdot left( Theta- Theta_0 right) + frac{1}{2} left( Theta - Theta_0 right)^t cdot nabla nabla S lvert_{ Theta_0} cdot left( Theta- Theta_0 right) end{align}$$$$ begin{align} P( sigma lvert D, I)&amp; propto sigma^{-(N+1)} exp{ left[- frac{S_0}{2 sigma^2} right]} int textrm{d} Theta exp{ left[- frac{1}{2} left( Theta- Theta_0 right)^t cdot frac{ nabla nabla S lvert_{ Theta_0}}{2 sigma^2} cdot left( Theta- Theta_0 right) right]} &amp; propto sigma^{d-(N+1)} exp{ left[- frac{S_0}{2 sigma^2} right]} end{align}$$ $$ begin{align} L &amp;= ln{P( sigma lvert D, I)} = textrm{const} + left(d - N - 1 right) ln{ sigma} - frac{S_0}{2 sigma^2} frac{ textrm{d}L}{ textrm{d} sigma} &amp;= (d-N-1) frac{1}{ sigma} + frac{S_0}{ sigma^3} frac{ textrm{d}^2L}{ textrm{d}^2 sigma} &amp;= (N+1-d) frac{1}{ sigma^2} - frac{3 S_0}{ sigma^4} end{align}$$ $$ begin{align} sigma_0^2 = frac{S_0}{N+1-d} end{align}$$ $$ begin{align} left. frac{ textrm{d}^2L}{ textrm{d}^2 sigma} right lvert_{ sigma_0} &amp;= frac{(N+1-d) sigma_0^2 - 3S_0}{ sigma_0^4} &amp;= frac{-2(N+1-d)}{ sigma_0^2} end{align}$$ $$ begin{align} sigma = sigma_0 pm frac{ sigma_0}{ sqrt{2(N+1-d)}} end{align}$$ import jax.numpy as np import numpy.random as random import matplotlib as mpl import matplotlib.pyplot as plt import pymc3 as pm import theano import theano.tensor as tt from scipy.optimize import minimize from jax import grad, jit, vmap, jacfwd, jacrev from jax.config import config; config.update(&quot;jax_enable_x64&quot;, True) mpl.style.use([&#39;seaborn-poster&#39;, &#39;seaborn-muted&#39;]) color = {&#39;light&#39;:&quot;#DCBCBC&quot;, &#39;light_highlight&#39;:&quot;#C79999&quot;, &#39;mid&#39;:&quot;#B97C7C&quot;, &#39;mid_highlight&#39;:&quot;#A25050&quot;, &#39;dark&#39;:&quot;#8F2727&quot;, &#39;dark_highlight&#39;:&quot;#7C0000&quot;, &#39;light_trans&#39;:&quot;#DCBCBC20&quot;, &#39;dark_trans&#39;:&quot;#8F272720&quot;, &#39;superfine&#39;:&quot;#00000060&quot;} def hessian(fun): return jit(jacfwd(jacrev(fun))) . def linear_func(θ, x): return θ[0] + θ[1]*x # y = mx + b def quadratic_func(θ, x): return θ[0] + θ[1]*x + θ[2]*x**2 # y = a x^2 + bx + c def make_noisy_func(f, σ): &quot;&quot;&quot;Returns function that computes noisy measurements for y ~ N(f, σ^2)&quot;&quot;&quot; return lambda θ,x : f(θ,x) + σ*random.randn(len(x)) . random.seed(12345) _θ0,σ0 = np.array([2.0, 1.0, 0.6]), 0.25 #nparams,func = 3, quadratic_func nparams,func = 2, linear_func θ0 = _θ0[:nparams] measurement = make_noisy_func(func, σ0) x_sample = np.linspace(0, 2.0, num=10) y_sample = np.array([measurement(θ0,x_sample) for i in range(8)]) y_avg, y_err= np.average(y_sample, axis=0), np.std(y_sample, axis=0) fig, ax = plt.subplots() for yi in y_sample: ax.plot(x_sample, yi, marker=&#39;o&#39;, ls=&#39;None&#39;, alpha=0.5, color=&#39;Grey&#39;) ax.plot(x_sample, yi, lw=0.5, alpha=0.5, color=&#39;Grey&#39;) ax.errorbar(x_sample, y_avg, yerr=y_err) ax.plot(x_sample, func(θ0,x_sample), ls=&#39;--&#39;) plt.show() . /opt/anaconda3/envs/ML/lib/python3.7/site-packages/jax/lib/xla_bridge.py:115: UserWarning: No GPU/TPU found, falling back to CPU. warnings.warn(&#39;No GPU/TPU found, falling back to CPU.&#39;) . @jit def chi2(θ): return np.sum((y_avg-func(θ,x_sample))**2/y_err**2) grad_chi2 = jit(grad(chi2)) hess_chi2 = hessian(chi2) . opt = minimize(chi2, np.ones_like(θ0), method=&#39;BFGS&#39;, jac=grad_chi2, options={&#39;maxiter&#39;:100, &#39;disp&#39;:1}) opt_ihess = np.linalg.inv(hess_chi2(opt[&#39;x&#39;])) . Optimization terminated successfully. Current function value: 1.118355 Iterations: 5 Function evaluations: 7 Gradient evaluations: 7 . labels = [&#39;b&#39;, &#39;m&#39;] for i in range(nparams): print(&#39;θ_{0} = {1:.2f} +/- {2:.1e} ({3:.1e})&#39;.format(i, opt[&#39;x&#39;][i], np.sqrt(opt[&#39;hess_inv&#39;][i,i]*2), np.sqrt(opt_ihess[i,i]*2))) . θ_0 = 1.96 +/- 1.4e-01 (1.4e-01) θ_1 = 1.02 +/- 1.1e-01 (1.1e-01) . with pm.Model() as model_prior: #priors for unknown model parameters ϕ = pm.Uniform(&#39;ϕ&#39;, lower=0, upper=np.pi/2) a = pm.Uniform(&#39;a&#39;, lower=-5*tt.cos(ϕ), upper=5*tt.cos(ϕ)) m = pm.Deterministic(&#39;m&#39;, tt.tan(ϕ)) b = pm.Deterministic(&#39;b&#39;, a/tt.cos(ϕ)) y = pm.Deterministic(&#39;y&#39;, func([b,m], x_sample)) . with model_prior: simu_prior = pm.sample_prior_predictive(samples=3000, random_seed = 123456) . def plot_quantiles(ax, x, data): &quot;&quot;&quot;Plot quantiles of data as a function of x Note : q-th quantile of &#39;data&#39; is the value &#39;q&#39; away from the minimum to the maximum in a sorted copy of &#39;data&#39;&quot;&quot;&quot; quantiles = np.quantile(data, np.arange(0.1, 1.0, 0.1), axis=0) # [0.1, ..., 0.9] -&gt; 80% credible interval for i,c in zip(range(len(quantiles)//2), [color[&#39;light&#39;], color[&#39;light_highlight&#39;], color[&#39;mid&#39;], color[&#39;mid_highlight&#39;]]): ax.fill_between(x, quantiles[i,:], quantiles[-(i+1),:], color=c) ax.plot(x, quantiles[4], color=color[&#39;dark&#39;], lw=4) . mask = np.abs(simu_prior[&#39;ϕ&#39;]-np.pi/3) &lt; 5e-2 . fig, ax = plt.subplots() plot_quantiles(ax, x_sample, simu_prior[&#39;y&#39;]-simu_prior[&#39;b&#39;][...,None]) #for yi,b in zip(simu_prior[&#39;y&#39;], simu_prior[&#39;b&#39;]): # ax.plot(x_sample, yi) ax.set_ylim(0,10) . (0, 10) .",
            "url": "https://johnjmolina.github.io/MLKyoto/data%20analysis/parameter%20estimation/2020/05/13/Parameter-Estimation.html",
            "relUrl": "/data%20analysis/parameter%20estimation/2020/05/13/Parameter-Estimation.html",
            "date": " • May 13, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://johnjmolina.github.io/MLKyoto/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://johnjmolina.github.io/MLKyoto/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://johnjmolina.github.io/MLKyoto/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://johnjmolina.github.io/MLKyoto/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}